\title{cs805 Assignment 1}
\author{
  Shulang Lei\\
  200253624\\
  Department of Computer Science\\
  University of Regina\\
}
\date{\today}

\documentclass[12pt]{article}
\setlength{\parindent}{0in}
\usepackage{graphicx}
\usepackage{mathtools}
\usepackage{amsthm}
\usepackage{parskip}
\usepackage{hyperref}

\begin{document}
\maketitle

\begin{abstract}
  This assignment is written in literate programming style, generated by noweb, and rendered by LaTex.
\end{abstract}

\section{Question 1}
Let $n$ be a 3 tuple vector, and given that it is along $V1$. It is trivial that  we can imply:
\[
        n = \frac{V1}{[|V1|,|V1|,|V1|]}
\]
where $|V1| = \sqrt{V1_x^2+V1_y^2+V1_z^2}$

Thus n is now known.

By the definition of cross product, denoted as $\times$ here, knowning that $V1$ and $V2$ is non-collinear, we can also derive:
\[
        u = \frac{V2 \times V3}{[|V2 \times V3|,|V2 \times V3|,|V2 \times V3|]}
\]

Finally, it is also trivial that:
\[
        v = u \times n
\]

\section{Question 2}
According to the requirement, we need a function that gets the new coordination U, V, N from our two vectors.

Assuming we have two points, our function will get the U, V, N from them. So I put it in our main function.
\begin{verbatim}
<<src/main.cpp>>=
#include <iostream>
#include <typeinfo>//debugging only
#include "get_uvn.h"

int main () {
  Point V1;
  decltype(V1) V2;//c11: V2 is of same type of V1

  V1 = {1,2,3};
  V2 = {3,2,1};

  auto uvn = get_uvn(V1, V2);//c11: compiler will replace 'auto' with the right type

  for (auto point : uvn) {//c11:for each point in uvn
    //std::cout<<typeid(point).name()<<std::endl;
    for (auto num : point) {//c11:for each number in point
      std::cout<<num<<std::endl;
    }
  }

  return 0;
}
@
\end{verbatim}

here is the function.
\begin{verbatim}
<<src/get_uvn.cpp>>=
#include "get_uvn.h"

UVN get_uvn(Point V1, Point V2) {
  UVN result_uvn;
  result_uvn = {V1, V1, V1};
  return result_uvn;
}
@
\end{verbatim}

we need a header file to avoid complicated typedefs.
\begin{verbatim}
<<src/get_uvn.h>>=
#ifndef POINTS_HPP
#define POINTS_HPP
#include <tr1/array>
typedef std::tr1::array<float, 3> Point;
typedef std::tr1::array<Point, 3> UVN;
 
UVN get_uvn(Point V1, Point V2);
#endif
@
\end{verbatim}

here is the command to link these files. Notice that I am using -std=c++11 flag to enable c++ 11 features.
\begin{verbatim}
<<compile.sh>>=
clang++ -std=c++11 -o bin/a.out src/main.cpp src/get_uvn.cpp
@
\end{verbatim}

\end{document}
